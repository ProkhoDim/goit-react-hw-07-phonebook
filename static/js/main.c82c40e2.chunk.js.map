{"version":3,"sources":["component/ContactList/ContactList.module.css","common/Input/Input.module.css","component/ContactForm/ContactForm.module.css","common/Input/Input.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","component/ContactForm/ContactForm.js","component/Filter/Filter.js","component/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducers.js","redux/store.js","index.js"],"names":["module","exports","Input","name","value","text","onChange","className","styles","label","span","type","input","defaultProps","getContactRequest","createAction","getContactSuccess","getContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","axios","defaults","baseURL","dispatch","a","get","data","contact","post","contactId","delete","getItems","state","contacts","items","getFilter","filter","getIsLoading","isLoading","contactsFilter","createSelector","contactsList","normilizedFilter","toLowerCase","includes","errorNotification","closeDelay","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","normilizedNumber","number","split","join","ContactForm","addContactClick","e","preventDefault","props","contactList","onSubmit","isContactExist","formReset","handleChange","target","setState","submitName","some","this","contactForm","formBtn","Component","connect","contactsSelectors","payload","operations","actions","onDeleteContact","map","id","key","contactItem","contactItem_info","contactText","onClick","deleteBtn","App","getContacts","length","contactsOperations","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c82c40e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2AQWC\",\"contactItem\":\"ContactList_contactItem__wZd8r\",\"contactText\":\"ContactList_contactText__17aV0\",\"deleteBtn\":\"ContactList_deleteBtn__2sJXh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Input_label__27XDO\",\"span\":\"Input_span__2Ydgg\",\"input\":\"Input_input__3Dqxp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__32qY5\",\"formLabel\":\"ContactForm_formLabel__3S_Bk\",\"formInput\":\"ContactForm_formInput__2nJ1p\",\"formBtn\":\"ContactForm_formBtn__3ow9b\"};","import React from 'react';\nimport styles from './Input.module.css';\nimport PropTypes from 'prop-types';\n\nconst Input = ({ name, value, text, onChange }) => {\n  return (\n    <>\n      <label className={styles.label}>\n        <span className={styles.span}>{text}</span>\n        <input\n          type=\"input\"\n          name={name}\n          onChange={onChange}\n          value={value}\n          className={styles.input}\n        />\n      </label>\n    </>\n  );\n};\n\nInput.defaultProps = {\n  value: '',\n};\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default Input;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const getContactRequest = createAction('contacts/getContactRequest');\nexport const getContactSuccess = createAction('contacts/getContactSuccess');\nexport const getContactError = createAction('contacts/getContactError');\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\nexport const filterContacts = createAction('contacts/filter');\n","import axios from 'axios';\nimport {\n  getContactRequest,\n  getContactSuccess,\n  getContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:3030';\n\nconst getContacts = () => async dispatch => {\n  try {\n    dispatch(getContactRequest());\n    const { data } = await axios.get('/contacts');\n    return dispatch(getContactSuccess(data));\n  } catch (error) {\n    return dispatch(getContactError(error));\n  }\n};\n\nconst addContact = contact => async dispatch => {\n  try {\n    dispatch(addContactRequest());\n    const { data } = await axios.post('/contacts', contact);\n    return dispatch(addContactSuccess(data));\n  } catch (error) {\n    return dispatch(addContactError(error));\n  }\n};\n\nconst deleteContact = contactId => async dispatch => {\n  try {\n    dispatch(deleteContactRequest());\n    await axios.delete(`/contacts/${contactId}`);\n    return dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    return dispatch(deleteContactError(error));\n  }\n};\n\nexport default { getContacts, addContact, deleteContact };\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getItems = state => state.contacts.items;\n\nconst getFilter = state => state.contacts.filter;\n\nconst getIsLoading = state => state.contacts.isLoading;\n\nconst contactsFilter = createSelector(\n  [getItems, getFilter],\n  (contactsList, filter) => {\n    const normilizedFilter = filter.toLowerCase();\n    return contactsList.filter(({ name }) =>\n      name.toLowerCase().includes(normilizedFilter),\n    );\n  },\n);\n\nexport default {\n  getFilter,\n  getIsLoading,\n  getItems,\n  contactsFilter,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ToastContainer, toast } from 'react-toastify';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport styles from './ContactForm.module.css';\n\nimport Input from '../../common/Input';\n\nimport operations from '../../redux/contacts/contacts-operations';\nimport { contactsSelectors } from '../../redux/contacts';\n\nconst errorNotification = (text, closeDelay = 1500) =>\n  toast.error(text, {\n    position: 'top-right',\n    autoClose: closeDelay,\n    hideProgressBar: true,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n\nconst normilizedNumber = number => number.split(/\\D/).join('');\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  addContactClick = e => {\n    e.preventDefault();\n\n    const { name, number } = this.state;\n    const { contactList, onSubmit } = this.props;\n\n    if (!name || !number) {\n      errorNotification(`Please, enter name and number!`);\n      return;\n    }\n\n    if (!this.isContactExist(contactList, name)) {\n      onSubmit({ name, number });\n      this.formReset();\n    }\n  };\n\n  handleChange = ({ target: { name, value } }) => {\n    name !== 'number'\n      ? this.setState({ [name]: value })\n      : this.setState({ [name]: normilizedNumber(value) });\n  };\n\n  formReset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  isContactExist = (contacts, submitName) => {\n    const isNameInContacts = contacts.some(({ name }) => submitName === name);\n\n    if (!isNameInContacts) return false;\n\n    errorNotification(`${submitName} is already in contacts`);\n    return true;\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.addContactClick} className={styles.contactForm}>\n        <Input\n          name=\"name\"\n          value={name}\n          text=\"name\"\n          onChange={this.handleChange}\n        />\n        <Input\n          name=\"number\"\n          value={number}\n          text=\"number\"\n          onChange={this.handleChange}\n        />\n        <button type=\"submit\" className={styles.formBtn}>\n          Add contact\n        </button>\n        <ToastContainer />\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contactList: contactsSelectors.getItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: payload => dispatch(operations.addContact(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport Input from '../../common/Input';\n\nimport * as actions from '../../redux/contacts/contacts-actions';\nimport { contactsSelectors } from '../../redux/contacts';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <>\n      <Input\n        name=\"filter\"\n        text=\"find contacts by name\"\n        value={filter}\n        onChange={onChange}\n      />\n    </>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  filter: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(actions.filterContacts(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport styles from './ContactList.module.css';\n\nimport operations from '../../redux/contacts/contacts-operations';\nimport { contactsSelectors } from '../../redux/contacts';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className={styles.contactList}>\n      {contacts.map(({ name, id, number }) => (\n        <li key={id} className={styles.contactItem}>\n          <p className={styles.contactItem_info}>\n            {name}: <span className={styles.contactText}>{number}</span>\n          </p>\n          <button\n            type=\"button\"\n            name=\"delete\"\n            onClick={() => onDeleteContact(id)}\n            className={styles.deleteBtn}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.contactsFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onDeleteContact: contactId => dispatch(operations.deleteContact(contactId)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './theme/global.css';\n\nimport ContactForm from './component/ContactForm';\nimport Filter from './component/Filter';\nimport ContactList from './component/ContactList';\n\nimport contactsOperations from './redux/contacts/contacts-operations';\nimport { contactsSelectors } from './redux/contacts';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.getContacts();\n  }\n  render() {\n    const { contactList, isLoading, filter } = this.props;\n    return (\n      <div className=\"Container\">\n        <section className=\"ContactSection\">\n          <h2>Phonebook</h2>\n          <ContactForm />\n        </section>\n        <section>\n          {contactList.length > 0 && (\n            <h2>\n              Contacts\n              {isLoading && <span> Loading...</span>}\n            </h2>\n          )}\n          {(contactList.length > 3 || filter) && <Filter />}\n          {contactList.length > 0 && <ContactList />}\n        </section>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contactList: contactsSelectors.getItems(state),\n  isLoading: contactsSelectors.getIsLoading(state),\n  filter: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getContacts: () => dispatch(contactsOperations.getContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  getContactRequest,\n  getContactSuccess,\n  getContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  filterContacts,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [getContactSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [filterContacts]: (_, { payload }) => payload,\n});\n\nconst isLoading = createReducer(false, {\n  [getContactRequest]: () => true,\n  [getContactSuccess]: () => false,\n  [getContactError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nexport default combineReducers({ items, filter, isLoading });\n","// import storage from 'redux-persist/lib/storage';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport contactsReducer from './contacts/contacts-reducers';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\n// const persistStoreConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport default { store };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}